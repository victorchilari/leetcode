(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[680],{1985:function(n,t,e){"use strict";e.r(t),e.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return l},default:function(){return d}});var r=e(2122),a=e(9756),o=(e(7294),e(3905)),s=["components"],u={},c=void 0,i={unversionedId:"arrays/contains-duplicate.solution.arrays",id:"arrays/contains-duplicate.solution.arrays",isDocsHomePage:!1,title:"contains-duplicate.solution.arrays",description:"`js",source:"@site/docs/arrays/contains-duplicate.solution.arrays.mdx",sourceDirName:"arrays",slug:"/arrays/contains-duplicate.solution.arrays",permalink:"/leetcode/arrays/contains-duplicate.solution.arrays",version:"current",frontMatter:{}},l=[],p={toc:l};function d(n){var t=n.components,e=(0,a.Z)(n,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function (nums) {\n    const set = new Set(nums);\n    return set.size != nums.length;\n};\n")))}d.isMDXComponent=!0}}]);